from fastapi import APIRouter, UploadFile, File, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import text
from app.database import get_db
from app.permissions import verify_token
import os, json, time
from dotenv import load_dotenv
import requests
from typing import Optional, Dict, List, Any

router = APIRouter(prefix="/transcricao", tags=["transcricao"])

# Configura√ß√µes (mantidas como estavam)
load_dotenv()
API_KEY = os.getenv("ELEVENLABS_API_KEY")
MODEL_ID = "scribe_v1"
N_SPK = 2  # dois locutores nas liga√ß√µes

class SpeakerClassifier:
    """
    Classificador para identificar Agente vs Cliente baseado na diariza√ß√£o do Scribe
    """
    
    def __init__(self):
        # Indicadores de AGENTE (peso 3x - aumentado)
        self.agent_indicators = [
            "bom dia", "boa tarde", "boa noite", "como posso ajudar",
            "posso te ajudar", "em que posso ajudar", "obrigado por entrar em contato",
            "agrade√ßo o contato", "empresa", "seguro", "cobertura", "ap√≥lice",
            "sinistro", "indeniza√ß√£o", "benef√≠cio", "muito obrigado", "agrade√ßo",
            "fico √† disposi√ß√£o", "qualquer d√∫vida", "mais alguma coisa",
            "protocolo", "abertura", "solicita√ß√£o", "documenta√ß√£o",
            "prazo", "sistema", "cadastro", "verificar", "consultar",
            # Novos indicadores importantes:
            "falo com", "representante", "empresa", "tecnologias", 
            "atendimento", "central", "setor", "departamento",
            "confirmar", "verificar seus dados", "cpf", "rg",
            "endere√ßo", "telefone para contato", "posso confirmar"
        ]
        
        # Indicadores de CLIENTE (peso 1x)
        self.client_indicators = [
            "quero saber", "preciso de", "gostaria de", "tenho uma d√∫vida",
            "n√£o entendi", "pode me explicar", "quanto custa", "qual o valor",
            "como fa√ßo para", "preciso fazer", "quero cancelar", "quero contratar",
            "meu nome √©", "eu sou", "t√° bem", "entendi", "ok", "certo",
            "minha situa√ß√£o", "meu caso", "aconteceu comigo", "estou precisando",
            "queria fazer", "me ajuda", "socorro", "urgente", "problema",
            "isso mesmo", "correto", "√© isso a√≠"
        ]

    def process_transcription(self, scribe_response: Dict) -> Dict:
        """Processa resposta do Scribe e adiciona classifica√ß√µes"""
        words = scribe_response.get('words', [])
        

        # An√°lise de falantes
        speaker_stats = {}
        
        for word_data in words:
            if word_data.get('type') != 'word':
                continue
                
            speaker_id = word_data.get('speaker_id', 'unknown')
            text = word_data.get('text', '').lower().strip()
            
            if not text:
                continue
                
            if speaker_id not in speaker_stats:
                speaker_stats[speaker_id] = {
                    'total_words': 0,
                    'agent_score': 0,
                    'client_score': 0,
                    'start_time': word_data.get('start', 0)
                }
            
            stats = speaker_stats[speaker_id]
            stats['total_words'] += 1
            
            # Pontua√ß√£o por indicadores
            for indicator in self.agent_indicators:
                if indicator in text:
                    stats['agent_score'] += 3  # Peso aumentado para agente
            
            for indicator in self.client_indicators:
                if indicator in text:
                    stats['client_score'] += 1
        
        # Classifica√ß√£o simples
        classifications = {}
        
        if len(speaker_stats) == 1:
            # Apenas um falante = agente
            speaker_id = list(speaker_stats.keys())[0]
            classifications[speaker_id] = 'agente'
        else:
            # M√∫ltiplos falantes
            speaker_list = list(speaker_stats.items())
            
            # Quem fala primeiro geralmente √© agente
            first_speaker = min(speaker_list, key=lambda x: x[1]['start_time'])[0]
            
            # Maior pontua√ß√£o de agente
            agent_scores = [(id, stats['agent_score']) for id, stats in speaker_list]
            best_agent_by_score = max(agent_scores, key=lambda x: x[1])[0]
            
            # Mais palavras (agentes falam mais)
            word_counts = [(id, stats['total_words']) for id, stats in speaker_list]
            most_talkative = max(word_counts, key=lambda x: x[1])[0]
            
            # Combina√ß√£o de heur√≠sticas
            agent_candidates = [first_speaker, best_agent_by_score, most_talkative]
            agent_candidate = max(set(agent_candidates), key=agent_candidates.count)
            
            classifications[agent_candidate] = 'agente'
            
            for speaker_id, _ in speaker_list:
                if speaker_id != agent_candidate:
                    classifications[speaker_id] = 'cliente'
        
        # Adiciona classifica√ß√µes √†s palavras
        enhanced_words = []
        for word_data in words:
            enhanced_word = word_data.copy()
            speaker_id = word_data.get('speaker_id')
            enhanced_word['speaker_role'] = classifications.get(speaker_id, 'unknown')
            enhanced_words.append(enhanced_word)
        
        # Cria resumo por papel com espa√ßos corretos
        def build_text_for_role(role_name):
            """Constr√≥i texto para um papel espec√≠fico com espa√ßamento correto"""
            words_for_role = []
            
            for word_data in enhanced_words:
                if word_data.get('speaker_role') == role_name:
                    word_type = word_data.get('type', '')
                    text = word_data.get('text', '')
                    
                    if word_type == 'word':
                        words_for_role.append(text)
                    elif word_type in ['spacing', 'punctuation']:
                        # Se √© espa√ßo/pontua√ß√£o, adiciona ao √∫ltimo elemento se existir
                        if words_for_role:
                            words_for_role[-1] += text
            
            # Se n√£o tem espa√ßos adequados, junta com espa√ßos
            if words_for_role:
                result = words_for_role[0]
                for word in words_for_role[1:]:
                    # Se a palavra n√£o come√ßa com pontua√ß√£o, adiciona espa√ßo
                    if not word.startswith((',', '.', '!', '?', ';', ':')):
                        result += ' '
                    result += word
                return result
            return ''
        
        role_summary = {
            'agente_text': build_text_for_role('agente'),
            'cliente_text': build_text_for_role('cliente'),
            'total_agente_words': len([w for w in enhanced_words if w.get('speaker_role') == 'agente' and w.get('type') == 'word']),
            'total_cliente_words': len([w for w in enhanced_words if w.get('speaker_role') == 'cliente' and w.get('type') == 'word'])
        }
        
        return {
            **scribe_response,
            'words': enhanced_words,
            'speaker_classifications': classifications,
            'role_summary': role_summary
        }


@router.post("/upload")
async def transcrever_audio_upload(
    arquivo: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_user: dict = Depends(verify_token)
):
    """
    Endpoint para transcrever um arquivo de √°udio (upload) de forma s√≠ncrona.
    Envia direto para ElevenLabs com classifica√ß√£o agente/cliente.
    """
    try:
        print(f"üéôÔ∏è Iniciando transcri√ß√£o com classifica√ß√£o: {arquivo.filename}")
        print(f"Tamanho do arquivo: {arquivo.size} bytes")
        
        # L√™ o conte√∫do do arquivo
        conteudo = await arquivo.read()
        
        # Envia direto para ElevenLabs (mantendo sua implementa√ß√£o original)
        print("Enviando para ElevenLabs...")
        resp = requests.post(
            "https://api.elevenlabs.io/v1/speech-to-text",
            headers={"xi-api-key": API_KEY},
            files={"file": (arquivo.filename, conteudo, arquivo.content_type)},  # Mantido como estava
            data={
                "model_id": MODEL_ID,
                "diarize": True,
                "num_speakers": N_SPK,
                "tag_audio_events": True,
                "timestamps_granularity": "word",  # Mantido como estava
                "language_code": "por"  # Mantido como estava
            },
            timeout=300  # 5 minutos de timeout
        )
        
        resp.raise_for_status()
        transcricao_data = resp.json()
        print("Transcri√ß√£o recebida com sucesso!")
        
        # ‚úÖ NOVA FUNCIONALIDADE: Adiciona classifica√ß√£o agente/cliente
        classifier = SpeakerClassifier()
        enhanced_transcription = classifier.process_transcription(transcricao_data)
        
        print(f"üîç Classifica√ß√£o autom√°tica: {enhanced_transcription.get('speaker_classifications', {})}")
        
        return {
            "mensagem": "Transcri√ß√£o com classifica√ß√£o realizada com sucesso",
            "arquivo": arquivo.filename,
            "palavras": len(enhanced_transcription.get("words", [])),
            "total_speakers": len(enhanced_transcription.get('speaker_classifications', {})),
            "transcricao": enhanced_transcription  # ‚úÖ Agora com classifica√ß√µes
        }
        
    except requests.exceptions.RequestException as e:
        print(f"Erro na API ElevenLabs: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro na transcri√ß√£o: {str(e)}")
    except Exception as e:
        print(f"Erro geral: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/{avaliacao_id}")
async def transcrever_audio(
    avaliacao_id: int,
    arquivo: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_user: dict = Depends(verify_token)
):
    """
    Transcreve √°udio direto para ElevenLabs com classifica√ß√£o e salva na tabela transcricoes.
    """
    try:
        # Verifica se avalia√ß√£o existe (mantido como estava)
        avaliacao = db.execute(
            text("SELECT id FROM avaliacoes WHERE id = :id"),
            {"id": avaliacao_id}
        ).first()
        
        if not avaliacao:
            raise HTTPException(status_code=404, detail="Avalia√ß√£o n√£o encontrada")

        # Verifica se j√° existe transcri√ß√£o (mantido como estava)
        transcricao_existente = db.execute(
            text("SELECT id FROM transcricoes WHERE avaliacao_id = :avaliacao_id"),
            {"avaliacao_id": avaliacao_id}
        ).first()
        
        if transcricao_existente:
            raise HTTPException(status_code=400, detail="J√° existe transcri√ß√£o para esta avalia√ß√£o")

        print(f"üéôÔ∏è Iniciando transcri√ß√£o com classifica√ß√£o para avalia√ß√£o {avaliacao_id}: {arquivo.filename}")
        
        # L√™ o conte√∫do do arquivo
        conteudo = await arquivo.read()
        
        # Envia direto para ElevenLabs (mantendo sua implementa√ß√£o original)
        print("Enviando para ElevenLabs...")
        resp = requests.post(
            "https://api.elevenlabs.io/v1/speech-to-text",
            headers={"xi-api-key": API_KEY},
            files={"file": (arquivo.filename, conteudo, arquivo.content_type)},  # Mantido como estava
            data={
                "model_id": MODEL_ID,
                "diarize": True,
                "num_speakers": N_SPK,
                "tag_audio_events": True,
                "timestamps_granularity": "word",  # Mantido como estava
                "language_code": "por"  # Mantido como estava
            },
            timeout=300
        )
        
        resp.raise_for_status()
        transcricao_data = resp.json()
        print("Transcri√ß√£o recebida com sucesso!")

        # ‚úÖ NOVA FUNCIONALIDADE: Adiciona classifica√ß√£o agente/cliente
        classifier = SpeakerClassifier()
        enhanced_transcription = classifier.process_transcription(transcricao_data)
        
        print(f"üîç Classifica√ß√£o autom√°tica: {enhanced_transcription.get('speaker_classifications', {})}")

        # Salva no banco (mantido como estava, mas agora com classifica√ß√µes)
        db.execute(
            text("""
                INSERT INTO transcricoes (avaliacao_id, conteudo, criado_em)
                VALUES (:avaliacao_id, :conteudo, CURRENT_TIMESTAMP)
            """),
            {
                "avaliacao_id": avaliacao_id,
                "conteudo": json.dumps(enhanced_transcription, ensure_ascii=False)  # ‚úÖ Salva com classifica√ß√µes
            }
        )
        db.commit()

        return {
            "avaliacao_id": avaliacao_id,
            "mensagem": "Transcri√ß√£o com classifica√ß√£o realizada e salva com sucesso",
            "palavras": len(enhanced_transcription.get("words", [])),
            "total_speakers": len(enhanced_transcription.get('speaker_classifications', {})),
            "transcricao": enhanced_transcription  # ‚úÖ Agora com classifica√ß√µes
        }

    except requests.exceptions.RequestException as e:
        db.rollback()
        print(f"Erro na API ElevenLabs: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro na transcri√ß√£o: {str(e)}")
    except Exception as e:
        db.rollback()
        print(f"Erro geral: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/{avaliacao_id}")
async def buscar_transcricao(
    avaliacao_id: int,
    db: Session = Depends(get_db),
    current_user: dict = Depends(verify_token)
):
    """
    Retorna a transcri√ß√£o com diariza√ß√£o e classifica√ß√µes de uma avalia√ß√£o
    """
    result = db.execute(
        text("SELECT id, conteudo, criado_em FROM transcricoes WHERE avaliacao_id = :avaliacao_id"),
        {"avaliacao_id": avaliacao_id}
    ).first()

    if not result:
        raise HTTPException(status_code=404, detail="Transcri√ß√£o n√£o encontrada")

    # Parse do JSON armazenado
    transcricao = json.loads(result[1])

    return {
        "id": result[0],
        "avaliacao_id": avaliacao_id,
        "transcricao": transcricao,  # Inclui texto, words com timestamps, speakers e roles
        "speaker_classifications": transcricao.get('speaker_classifications', {}),  # ‚úÖ Retorna classifica√ß√µes
        "role_summary": transcricao.get('role_summary', {}),  # ‚úÖ Retorna resumo por papel
        "criado_em": result[2]
    }